//http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html

1. Create static library (.a)
Compile: cc -Wall -c ctest1.c ctest2.c 
Compiler options: 
-Wall: include warnings. See man page for warnings specified. 
Create library "libctest.a": ar -cvq libctest.a ctest1.o ctest2.o 
List files in library: ar -t libctest.a 
Linking with the library: 
cc -o executable-name prog.c libctest.a 
cc -o executable-name prog.c -L/path/to/library-directory -lctest 


2. Create dynamic(shared) library (.so)
gcc -Wall -fPIC -c *.c
gcc -shared -Wl,-soname,libctest.so.1 -o libctest.so.1.0   *.o
mv libctest.so.1.0 /lib
ln -sf /lib/libctest.so.1.0 /lib/libctest.so.1
ln -sf /lib/libctest.so.1.0 /lib/libctest.so

(The link to /lib/libctest.so allows the naming convention for the compile flag -lctest to work. 
The link to /lib/libctest.so.1 allows the run time binding to work. See dependency below)

Linking with shared object library
gcc -Wall -I/path/to/include-files -L/path/to/libraries prog.c -lctest -o prog

Don't need to specify lib path in linking, just export lib path
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/lib

nm: list symbols in object files or archive lib and shared lib
ie. 
nm test.o
nm test.a
nm test.so

Note some symbol type
T(normal code section), U(undefined symbol used but not defined. Dependency on another library)

3. Remark
if creating archive lib and shared lib from same source, the size of archive lib is bigger.
reason: executable program created by archive lib consists original source + source in lib and created at compiling time.
executable program created by dynamic lib only constists original source, the lib will NOT be included in the executable but 
will be dynamically linked during runtime execution. 

4. extern "C"
http://stackoverflow.com/questions/14191464/linking-gcc-with-g-code
Suppose a lib created in C code (gcc), we have another c++ code and want to use the lib.
We need to use "extern C" in c++ code

